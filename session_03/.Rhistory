) ,
data = d )
## R code 5.7
# compute expected value at MAP, for each State
mu <- coef(m5.4)['a'] + coef(m5.4)['b']*d$MedianAgeMarriage.s
# compute residual for each State
m.resid <- d$Marriage.s - mu
## R code 5.8
plot( Marriage.s ~ MedianAgeMarriage.s , d , col=rangi2 )
abline( m5.4 )
# loop over States
for ( i in 1:length(m.resid) ) {
x <- d$MedianAgeMarriage.s[i] # x location of line segment
y <- d$Marriage.s[i] # observed endpoint of line segment
# draw the line segment
lines( c(x,x) , c(mu[i],y) , lwd=0.5 , col=col.alpha("black",0.7) )
}
## R code 5.9
# prepare new counterfactual data
A.avg <- mean( d$MedianAgeMarriage.s )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
Marriage.s=R.seq,
MedianAgeMarriage.s=A.avg
)
# compute counterfactual mean divorce (mu)
mu <- link( m5.3 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate counterfactual divorce outcomes
R.sim <- sim( m5.3 , data=pred.data , n=1e4 )
R.PI <- apply( R.sim , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( Divorce ~ Marriage.s , data=d , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq , mu.mean )
shade( mu.PI , R.seq )
shade( R.PI , R.seq )
R.avg <- mean( d$Marriage.s )
A.seq <- seq( from=-3 , to=3.5 , length.out=30 )
pred.data2 <- data.frame(
Marriage.s=R.avg,
MedianAgeMarriage.s=A.seq
)
mu <- link( m5.3 , data=pred.data2 )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
A.sim <- sim( m5.3 , data=pred.data2 , n=1e4 )
A.PI <- apply( A.sim , 2 , PI )
plot( Divorce ~ MedianAgeMarriage.s , data=d , type="n" )
mtext( "Marriage.s = 0" )
lines( A.seq , mu.mean )
shade( mu.PI , A.seq )
shade( A.PI , A.seq )
## R code 5.11
# call link without specifying new data
# so it uses original data
mu <- link( m5.3 )
# summarize samples across cases
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate observations
# again no new data, so uses original data
divorce.sim <- sim( m5.3 , n=1e4 )
divorce.PI <- apply( divorce.sim , 2 , PI )
## R code 5.12
plot( mu.mean ~ d$Divorce , col=rangi2 , ylim=range(mu.PI) ,
xlab="Observed divorce" , ylab="Predicted divorce" )
abline( a=0 , b=1 , lty=2 )
for ( i in 1:nrow(d) )
lines( rep(d$Divorce[i],2) , c(mu.PI[1,i],mu.PI[2,i]) ,
col=rangi2 )
## R code 5.13
identify( x=d$Divorce , y=mu.mean , labels=d$Loc , cex=0.8 )
## R code 5.11
# call link without specifying new data
# so it uses original data
mu <- link( m5.3 )
# summarize samples across cases
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate observations
# again no new data, so uses original data
divorce.sim <- sim( m5.3 , n=1e4 )
divorce.PI <- apply( divorce.sim , 2 , PI )
## R code 5.12
plot( mu.mean ~ d$Divorce , col=rangi2 , ylim=range(mu.PI) ,
xlab="Observed divorce" , ylab="Predicted divorce" )
abline( a=0 , b=1 , lty=2 )
for ( i in 1:nrow(d) )
lines( rep(d$Divorce[i],2) , c(mu.PI[1,i],mu.PI[2,i]) ,
col=rangi2 )
## R code 5.13
identify( x=d$Divorce , y=mu.mean , labels=d$Loc , cex=0.8 )
source('~/Projectes/R/simulaBolsa/simula1.R', echo=TRUE)
simulaPut(strike=200,valorPutOrigin=1200,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=200,valorPutOrigin=1200,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.4,sig=0.1)
source('~/Projectes/R/simulaBolsa/simula1.R', echo=TRUE)
simulaPut(strike=200,valorPutOrigin=1200,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.35,sig=0.1)
simulaPut(strike=200,valorPutOrigin=1200,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.45,sig=0.1)
simulaPut(strike=210,valorPutOrigin=1470,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.45,sig=0.1)
simulaPut(strike=210,valorPutOrigin=1470,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=230,valorPutOrigin=2131,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=240,valorPutOrigin=2549,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=260,valorPutOrigin=3572,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=245,valorPutOrigin=2780,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
n <- 100
source('~/Projectes/R/CursBayesianStatistics/session_01/01_generative_models.R', echo=TRUE)
?rbinom
muestra <- rbinom(n, 1, p)
muestra
muertos_ano_0 <- rpois(1000, 1160)
n <- 100
p <- 0.51
muestra <- rbinom(n, 1, p)
muertos_ano_0 <- rpois(1000, 1160)
muertos_ano_1 <- rpois(1000, 1131)
hist(muertos_ano_1 - muertos_ano_0)
?rpois
mu <- 1.5
incr <- 0.7
sigma <- 0.5
x <- rnorm(13, mu, sigma)
y <- rnorm(15, mu + incr, sigma)
t.test(x, y)
n <- 100
a <- 1.1
b <- 0.3
sigma <- 0.3
x <- runif(n, -5, 5)
y <- rnorm(n, a + b * x, sigma)
plot(x, y)
abline(lm(y ~ x), col = "red")
modelo <- lm(y ~ x)
summary(modelo)
n_customers <- 100
lambda_exp <- 0.1
lambda_pois <- 1.3
customer_life <- rexp(n_customers, lambda_exp)
hist(customer_life)
sales <- sapply(customer_life, function(d) rpois(1, lambda_pois * d))
hist(sales)
rstan:::rstudio_stanc("Projectes/R/CursBayesianStatistics/session_01/01_t_test.stan")
source('~/Projectes/R/CursBayesianStatistics/session_01/01_t_test.R', echo=TRUE)
install.packages(psych)
install.packages('psych')
install.packages('psych')
install.packages('psych',dependencies = TRUE)
setwd("~/Projectes/R/CursBayesianStatistics/session_03")
setwd("~/Projectes/R/CursBayesianStatistics/session_03")
library(plyr)
library(ggplot2)
library(lme4)
install.packages('lme4')
library(lattice)
slope <- 0.2
dose_levels <- 0:4
dose_levels
hours_without <- rnorm(n_subjects, 7, 1)
datos <- ldply(1:n_subjects, function(i)
data.frame(id = i,
dosis = dose_levels,
hours = hours_without[i] + slope * dose_levels +
rnorm(length(dose_levels), 0, 0.5)
))
datos$id <- factor(datos$id)
ggplot(datos, aes(x = dosis, y = hours)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~id)
plot(datos$dosis, datos$hours)
abline(lm(hours ~ dosis, data = datos), col = "red")
modelo_00 <- lm(hours ~ dosis, data = datos)
summary(modelo_00)
modelo_01 <- lm(hours ~ id + dosis, data = datos)
modelo_01 <- lm(hours ~ -1 + id + dosis, data = datos)
summary(modelo_01)
modelo_02 <- lmer(hours ~ dosis + (1 | id), data = datos)
summary(modelo_02)
dotplot(ranef(modelo_02, condVar = TRUE))
n_subjects <- 20
hours_without <- rnorm(n_subjects, 7, 1)
datos <- ldply(1:n_subjects, function(i)
data.frame(id = i,
dosis = dose_levels,
hours = hours_without[i] + slope * dose_levels +
rnorm(length(dose_levels), 0, 0.5)
))
datos$id <- factor(datos$id)
ggplot(datos, aes(x = dosis, y = hours)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~id)
plot(datos$dosis, datos$hours)
plot(datos$dosis, datos$hours)
abline(lm(hours ~ dosis, data = datos), col = "red")
modelo_00 <- lm(hours ~ dosis, data = datos)
summary(modelo_00)
modelo_01 <- lm(hours ~ id + dosis, data = datos)
modelo_01 <- lm(hours ~ -1 + id + dosis, data = datos)
summary(modelo_01)
modelo_02 <- lmer(hours ~ dosis + (1 | id), data = datos)
summary(modelo_02)
modelo_02 <- lm(hours ~ dosis + (1 | id), data = datos)
summary(modelo_02)
head(datos)
modelo_02 <- lmer(hours ~ dosis + (1 | id), data = datos)
library(lme4)
modelo_02 <- lmer(hours ~ dosis + (1 | id), data = datos)
summary(modelo_02)
dotplot(ranef(modelo_02, condVar = TRUE))
modelo_02 <- lmer(hours ~ dosis + (1 | id), data = datos)
summary(modelo_02)
modelo_01 <- lm(hours ~ id + dosis, data = datos)
modelo_01 <- lm(hours ~ -1 + id + dosis, data = datos)
summary(modelo_01)
modelo_02 <- lmer(hours ~ dosis + (1 | id), data = datos)
summary(modelo_02)
slope <- 0.2
dose_levels <- 0:4
n_subjects <- 20
hours_without <- rnorm(n_subjects, 7, 1)
datos <- ldply(1:n_subjects, function(i)
data.frame(id = i,
dosis = dose_levels,
hours = hours_without[i] + slope * dose_levels +
rnorm(length(dose_levels), 0, 0.5)
))
datos$id <- factor(datos$id)
ggplot(datos, aes(x = dosis, y = hours)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~id)
plot(datos$dosis, datos$hours)
abline(lm(hours ~ dosis, data = datos), col = "red")
modelo_00 <- lm(hours ~ dosis, data = datos)
summary(modelo_00)
modelo_01 <- lm(hours ~ id + dosis, data = datos)
modelo_01 <- lm(hours ~ -1 + id + dosis, data = datos)
summary(modelo_01)
modelo_02 <- lmer(hours ~ dosis + (1 | id), data = datos)
summary(modelo_02)
modelo_00 <- lm(hours ~ dosis, data = datos)
summary(modelo_00)
modelo_02 <- lmer(hours ~ dosis + (1 | id), data = datos)
summary(modelo_02)
slope <- 0.2
dose_levels <- 0:4
n_subjects <- 20
hours_without <- rnorm(n_subjects, 7, 1)
slopes_sj <- rnorm(n_subjects, slope, 0.1)
datos <- ldply(1:n_subjects, function(i) data.frame(id = i,
dosis = dose_levels,
hours = hours_without[i] + slopes_sj[i] * dose_levels +
rnorm(length(dose_levels), 0, 0.5)))
datos$id <- factor(datos$id)
ggplot(datos, aes(x = dosis, y = hours)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~id)
modelo_00 <- lm(hours ~ id + dosis * id, data = datos)
summary(modelo_00)
modelo_01 <- lmer(hours ~ 1 + dosis + (1 + dosis| id), data = datos)
summary(modelo_01)
datos_alt <- datos
datos_alt$dosis <- datos_alt$dosis - 2
modelo_01 <- lmer(hours ~ 1 + dosis + (1 + dosis| id), data = datos_alt)
summary(modelo_01)
dotplot(ranef(modelo_01, condVar = TRUE))
summary(modelo_01)
datos_alt <- datos
datos_alt$dosis <- datos_alt$dosis - 2
modelo_01 <- lmer(hours ~ 1 + dosis + (1 + dosis| id), data = datos_alt)
summary(modelo_01)
dotplot(ranef(modelo_01, condVar = TRUE))
slope <- 0.2
dose_levels <- 0:4
n_subjects <- 20
sexo <- rep(0:1, each = n_subjects / 2)
hours_without <- rnorm(n_subjects, 7, 1)
slopes_sj <- rnorm(n_subjects, slope, 0.1)
datos <- ldply(1:n_subjects, function(i) data.frame(id = i,
dosis = dose_levels,
sexo  = sexo[i],
hours = hours_without[i]  - 0.5 * sexo[i] + slopes_sj[i] * dose_levels + rnorm(length(dose_levels), 0, 0.5)))
datos$id <- factor(datos$id)
datos$sexo <- factor(datos$sexo)
ggplot(datos, aes(x = dosis, y = hours)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~id)
modelo_00 <- lm(hours ~ id + sexo + dosis * id, data = datos)
summary(modelo_00)
modelo_01 <- lmer(hours ~ 1 + sexo + dosis + (1 + dosis| id), data = datos)
summary(modelo_01)
setwd("~/Projectes/R/CursBayesianStatistics/session_03")
library(plyr)
library(ggplot2)
library(lme4)
library(rstan)
setwd("~/Projectes/R/CursBayesianStatistics/session_03")
library(plyr)
library(ggplot2)
library(lme4)
library(rstan)
slope <- 0.2
dose_levels <- 0:4
n_subjects <- 20
hours_base <- rnorm(n_subjects, 7, 1)
datos <- ldply(1:n_subjects, function(i) data.frame(id = i,
dose = dose_levels,
hours = hours_base[i] + slope * dose_levels + rnorm(length(dose_levels), 0, 0.5)))
datos$id <- factor(datos$id)
ggplot(datos, aes(x = dose, y = hours)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~id)
modelo_00 <- lm(hours ~ id + dose, data = datos)
summary(modelo_00)
modelo_01 <- lmer(hours ~ dose + (1 | id), data = datos)
summary(modelo_01)
stan_data <- list(
n_subjects = n_subjects,
n_obs     = nrow(datos),
id    = as.numeric(as.character(datos$id)),
dose = datos$dose,
hours = datos$hours
)
fit_alt <- stan(file = "03_mixed_models_stan.stan",
data = stan_data,
iter = 10000, warmup = 5000,
chains = 1, thin = 10)
res <- as.data.frame(fit_alt)
hist(res$coef)
tmp <- res[, c("coef", "sigma", "mu0", "sigma0")]
plot(tmp)
library(psych)
pairs.panels(tmp,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
summary(fit_alt)
stan_data <- list(
n_subjects = n_subjects,
n_obs     = nrow(datos),
id    = as.numeric(as.character(datos$id)),
dose = datos$dose,
hours = datos$hours
)
fit_alt <- stan(file = "03_mixed_models_stan.stan",
data = stan_data,
iter = 10000, warmup = 5000,
chains = 1, thin = 10)
stan_data <- list(
n_subjects = n_subjects,
n_obs     = nrow(datos),
id    = as.numeric(as.character(datos$id)),
dose = datos$dose,
hours = datos$hours
)
fit_alt <- stan(file = "03_mixed_models_stan.stan",
data = stan_data,
iter = 10000, warmup = 5000,
chains = 1, thin = 10)
stan_data <- list(
n_subjects = n_subjects,
n_obs     = nrow(datos),
id    = as.numeric(as.character(datos$id)),
dose = datos$dose,
hours = datos$hours
)
fit_alt <- stan(file = "03_mixed_models_stan.stan",
data = stan_data,
iter = 10000, warmup = 5000,
chains = 1, thin = 10)
res <- as.data.frame(fit_alt)
hist(res$coef)
tmp <- res[, c("coef", "sigma", "mu0", "sigma0","muC","sigmaC")]
res <- as.data.frame(fit_alt)
hist(res$coef)
tmp <- res[, c("coef", "sigma", "mu0", "sigma0","muC","sigmaC")]
head(res)
tmp <- res[, c("coef", "sigma", "mu0", "sigma0")]
tmp <- res[, c(sigma", "mu0", "sigma0","muC","sigmaC")]
# tmp <- res[, c("coef", "sigma", "mu0", "sigma0")]
plot(tmp)
library(psych)
pairs.panels(tmp,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
tmp <- res[, c("sigma", "mu0", "sigma0","muC","sigmaC")]
plot(tmp)
library(psych)
pairs.panels(tmp,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
<- list(
n_subje
stan_data <- list(
n_subjects = n_subjects,
n_obs     = nrow(datos),
id    = as.numeric(as.character(datos$id)),
dose = datos$dose,
hours = datos$hours
)
fit_alt <- stan(file = "03_mixed_models_stanCoef.stan",
data = stan_data,
iter = 10000, warmup = 5000,
chains = 1, thin = 10)
res <- as.data.frame(fit_alt)
hist(res$coef)
tmp <- res[, c("sigma", "mu0", "sigma0","muC","sigmaC")]
plot(tmp)
pairs.panels(tmp,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
datos
ggplot(datos, aes(x = dose, y = hours)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~id)
modelo_00 <- lm(hours ~ id + dose, data = datos)
summary(modelo_00)
modelo_01 <- lmer(hours ~ dose + (1 | id), data = datos)
summary(modelo_01)
stan_data <- list(
n_subjects = n_subjects,
n_obs     = nrow(datos),
id    = as.numeric(as.character(datos$id)),
dose = datos$dose,
hours = datos$hours
)
fit_alt <- stan(file = "03_mixed_models_stanCoef.stan",
data = stan_data,
iter = 10000, warmup = 5000,
chains = 1, thin = 10)
res <- as.data.frame(fit_alt)
tmp <- res[, c("sigma", "mu0", "sigma0","muC","sigmaC")]
plot(tmp)
library(psych)
pairs.panels(tmp,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
stan_data <- list(
n_subjects = n_subjects,
n_obs     = nrow(datos),
id    = as.numeric(as.character(datos$id)),
dose = datos$dose,
hours = datos$hours
)
fit_alt <- stan(file = "03_mixed_models_stanCoef.stan",
data = stan_data,
iter = 10000, warmup = 5000,
chains = 1, thin = 10)
setwd("~/Projectes/R/CursBayesianStatistics/session_03")
library(plyr)
library(ggplot2)
library(rstan)
n_students <- 300
students <- 1:n_students
schools <- sample(1:n_schools, n_students, replace = T)
n_exams <- 3
mu <- 5
school_effect <- rnorm(n_schools, 0, 0.5)
student_effect <- rnorm(n_students, 0, 2)
exams <- ldply(students, function(id)
data.frame(student = id, school = schools[id], exam = 1:n_exams,
marks = student_effect[id] + school_effect[schools[id]] + rnorm(n_exams, 0, 1)))
n_students <- 300
students <- 1:n_students
schools <- sample(1:n_schools, n_students, replace = T)
n_schools<-10
n_students <- 300
students <- 1:n_students
schools <- sample(1:n_schools, n_students, replace = T)
n_exams <- 3
mu <- 5
school_effect <- rnorm(n_schools, 0, 0.5)
student_effect <- rnorm(n_students, 0, 2)
exams <- ldply(students, function(id)
data.frame(student = id, school = schools[id], exam = 1:n_exams,
marks = student_effect[id] + school_effect[schools[id]] + rnorm(n_exams, 0, 1)))
stan_data = list(
n_obs = nrow(exams),
n_students = n_students,
n_schools = n_schools,
students = exams$student,
schools  = exams$school,
marks    = exams$marks
)
fit_alt <- stan(file = "03_anova_stan.stan",
data = stan_data,
iter = 10000, warmup = 5000,
chains = 1, thin = 10)
summary(fit_alt)
tmp <- res[, c("sigma", "mu0", "sigma0","muC","sigmaC")]
res <- as.data.frame(fit_alt)
head(res)
