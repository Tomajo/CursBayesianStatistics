alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bR * Marriage.s ,
a ~ dnorm( 10 , 10 ) ,
bR ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = d )
MAM.seq <- seq( from=-3 , to=3.5 , length.out=30 )
mu <- link( m5.2 , data=data.frame(MedianAgeMarriage.s=MAM.seq) )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( Divorce ~ MedianAgeMarriage.s , data=d , col=rangi2 )
abline( m5.2 )
shade( mu.PI , MAM.seq )
MAM.seq <- seq( from=-3 , to=3.5 , length.out=30 )
mu <- link( m5.2 , data=data.frame(MedianAgeMarriage.s=MAM.seq) )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( Divorce ~ Marriage.s , data=d , col=rangi2 )
abline( m5.2 )
shade( mu.PI , MAM.seq )
head(d)
plot( Divorce ~ Marriage , data=d , col=rangi2 )
MAM.seq <- seq( from=-3 , to=3.5 , length.out=30 )
mu <- link( m5.2 , data=data.frame(Marriage.s=MAM.seq) )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( Divorce ~ Marriage.s , data=d , col=rangi2 )
abline( m5.2 )
shade( mu.PI , MAM.seq )
m5.3 <- map(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bR*Marriage.s + bA*MedianAgeMarriage.s ,
a ~ dnorm( 10 , 10 ) ,
bR ~ dnorm( 0 , 1 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) ,
data = d )
precis( m5.3 )
## R code 5.5
plot( precis(m5.3) )
precis(m5.3)
plot( precis(m5.3) )
m5.4 <- map(
alist(
Marriage.s ~ dnorm( mu , sigma ) ,
mu <- a + b*MedianAgeMarriage.s ,
a ~ dnorm( 0 , 10 ) ,
b ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) ,
data = d )
## R code 5.7
# compute expected value at MAP, for each State
mu <- coef(m5.4)['a'] + coef(m5.4)['b']*d$MedianAgeMarriage.s
# compute residual for each State
m.resid <- d$Marriage.s - mu
## R code 5.8
plot( Marriage.s ~ MedianAgeMarriage.s , d , col=rangi2 )
abline( m5.4 )
# loop over States
for ( i in 1:length(m.resid) ) {
x <- d$MedianAgeMarriage.s[i] # x location of line segment
y <- d$Marriage.s[i] # observed endpoint of line segment
# draw the line segment
lines( c(x,x) , c(mu[i],y) , lwd=0.5 , col=col.alpha("black",0.7) )
}
## R code 5.9
# prepare new counterfactual data
A.avg <- mean( d$MedianAgeMarriage.s )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
Marriage.s=R.seq,
MedianAgeMarriage.s=A.avg
)
# compute counterfactual mean divorce (mu)
mu <- link( m5.3 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate counterfactual divorce outcomes
R.sim <- sim( m5.3 , data=pred.data , n=1e4 )
R.PI <- apply( R.sim , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( Divorce ~ Marriage.s , data=d , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq , mu.mean )
shade( mu.PI , R.seq )
shade( R.PI , R.seq )
plot( Marriage.s ~ MedianAgeMarriage.s , d , col=rangi2 )
abline( m5.4 )
# loop over States
for ( i in 1:length(m.resid) ) {
x <- d$MedianAgeMarriage.s[i] # x location of line segment
y <- d$Marriage.s[i] # observed endpoint of line segment
# draw the line segment
lines( c(x,x) , c(mu[i],y) , lwd=0.5 , col=col.alpha("black",0.7) )
}
## R code 5.9
# prepare new counterfactual data
A.avg <- mean( d$MedianAgeMarriage.s )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
Marriage.s=R.seq,
MedianAgeMarriage.s=A.avg
)
# compute counterfactual mean divorce (mu)
mu <- link( m5.3 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate counterfactual divorce outcomes
R.sim <- sim( m5.3 , data=pred.data , n=1e4 )
R.PI <- apply( R.sim , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( Divorce ~ Marriage.s , data=d , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq , mu.mean )
shade( mu.PI , R.seq )
shade( R.PI , R.seq )
A.avg <- mean( d$MedianAgeMarriage.s )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
Marriage.s=R.seq,
MedianAgeMarriage.s=A.avg
)
# compute counterfactual mean divorce (mu)
mu <- link( m5.3 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate counterfactual divorce outcomes
R.sim <- sim( m5.3 , data=pred.data , n=1e4 )
R.PI <- apply( R.sim , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( Divorce ~ Marriage.s , data=d , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq , mu.mean )
shade( mu.PI , R.seq )
shade( R.PI , R.seq )
## R code 5.10
R.avg <- mean( d$Marriage.s )
A.seq <- seq( from=-3 , to=3.5 , length.out=30 )
pred.data2 <- data.frame(
Marriage.s=R.avg,
MedianAgeMarriage.s=A.seq
)
mu <- link( m5.3 , data=pred.data2 )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
A.sim <- sim( m5.3 , data=pred.data2 , n=1e4 )
A.PI <- apply( A.sim , 2 , PI )
plot( Divorce ~ MedianAgeMarriage.s , data=d , type="n" )
mtext( "Marriage.s = 0" )
lines( A.seq , mu.mean )
shade( mu.PI , A.seq )
shade( A.PI , A.seq )
## R code 5.1
# load data
library(rethinking)
data(WaffleDivorce)
d <- WaffleDivorce
# standardize predictor
d$MedianAgeMarriage.s <- (d$MedianAgeMarriage-mean(d$MedianAgeMarriage))/
sd(d$MedianAgeMarriage)
# fit model
m5.1 <- map(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bA * MedianAgeMarriage.s ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = d )
## R code 5.2
# compute percentile interval of mean
MAM.seq <- seq( from=-3 , to=3.5 , length.out=30 )
mu <- link( m5.1 , data=data.frame(MedianAgeMarriage.s=MAM.seq) )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( Divorce ~ MedianAgeMarriage.s , data=d , col=rangi2 )
abline( m5.1 )
shade( mu.PI , MAM.seq )
## R code 5.3
d$Marriage.s <- (d$Marriage - mean(d$Marriage))/sd(d$Marriage)
m5.2 <- map(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bR * Marriage.s ,
a ~ dnorm( 10 , 10 ) ,
bR ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = d )
MAM.seq <- seq( from=-3 , to=3.5 , length.out=30 )
mu <- link( m5.2 , data=data.frame(Marriage.s=MAM.seq) )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( Divorce ~ Marriage.s , data=d , col=rangi2 )
abline( m5.2 )
shade( mu.PI , MAM.seq )
## R code 5.4
m5.3 <- map(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bR*Marriage.s + bA*MedianAgeMarriage.s ,
a ~ dnorm( 10 , 10 ) ,
bR ~ dnorm( 0 , 1 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) ,
data = d )
precis( m5.3 )
## R code 5.5
plot( precis(m5.3) )
## R code 5.6
m5.4 <- map(
alist(
Marriage.s ~ dnorm( mu , sigma ) ,
mu <- a + b*MedianAgeMarriage.s ,
a ~ dnorm( 0 , 10 ) ,
b ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) ,
data = d )
## R code 5.7
# compute expected value at MAP, for each State
mu <- coef(m5.4)['a'] + coef(m5.4)['b']*d$MedianAgeMarriage.s
# compute residual for each State
m.resid <- d$Marriage.s - mu
## R code 5.8
plot( Marriage.s ~ MedianAgeMarriage.s , d , col=rangi2 )
abline( m5.4 )
# loop over States
for ( i in 1:length(m.resid) ) {
x <- d$MedianAgeMarriage.s[i] # x location of line segment
y <- d$Marriage.s[i] # observed endpoint of line segment
# draw the line segment
lines( c(x,x) , c(mu[i],y) , lwd=0.5 , col=col.alpha("black",0.7) )
}
## R code 5.9
# prepare new counterfactual data
A.avg <- mean( d$MedianAgeMarriage.s )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
Marriage.s=R.seq,
MedianAgeMarriage.s=A.avg
)
# compute counterfactual mean divorce (mu)
mu <- link( m5.3 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate counterfactual divorce outcomes
R.sim <- sim( m5.3 , data=pred.data , n=1e4 )
R.PI <- apply( R.sim , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( Divorce ~ Marriage.s , data=d , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq , mu.mean )
shade( mu.PI , R.seq )
shade( R.PI , R.seq )
R.avg <- mean( d$Marriage.s )
A.seq <- seq( from=-3 , to=3.5 , length.out=30 )
pred.data2 <- data.frame(
Marriage.s=R.avg,
MedianAgeMarriage.s=A.seq
)
mu <- link( m5.3 , data=pred.data2 )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
A.sim <- sim( m5.3 , data=pred.data2 , n=1e4 )
A.PI <- apply( A.sim , 2 , PI )
plot( Divorce ~ MedianAgeMarriage.s , data=d , type="n" )
mtext( "Marriage.s = 0" )
lines( A.seq , mu.mean )
shade( mu.PI , A.seq )
shade( A.PI , A.seq )
## R code 5.11
# call link without specifying new data
# so it uses original data
mu <- link( m5.3 )
# summarize samples across cases
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate observations
# again no new data, so uses original data
divorce.sim <- sim( m5.3 , n=1e4 )
divorce.PI <- apply( divorce.sim , 2 , PI )
## R code 5.12
plot( mu.mean ~ d$Divorce , col=rangi2 , ylim=range(mu.PI) ,
xlab="Observed divorce" , ylab="Predicted divorce" )
abline( a=0 , b=1 , lty=2 )
for ( i in 1:nrow(d) )
lines( rep(d$Divorce[i],2) , c(mu.PI[1,i],mu.PI[2,i]) ,
col=rangi2 )
## R code 5.13
identify( x=d$Divorce , y=mu.mean , labels=d$Loc , cex=0.8 )
## R code 5.11
# call link without specifying new data
# so it uses original data
mu <- link( m5.3 )
# summarize samples across cases
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate observations
# again no new data, so uses original data
divorce.sim <- sim( m5.3 , n=1e4 )
divorce.PI <- apply( divorce.sim , 2 , PI )
## R code 5.12
plot( mu.mean ~ d$Divorce , col=rangi2 , ylim=range(mu.PI) ,
xlab="Observed divorce" , ylab="Predicted divorce" )
abline( a=0 , b=1 , lty=2 )
for ( i in 1:nrow(d) )
lines( rep(d$Divorce[i],2) , c(mu.PI[1,i],mu.PI[2,i]) ,
col=rangi2 )
## R code 5.13
identify( x=d$Divorce , y=mu.mean , labels=d$Loc , cex=0.8 )
source('~/Projectes/R/simulaBolsa/simula1.R', echo=TRUE)
simulaPut(strike=200,valorPutOrigin=1200,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=200,valorPutOrigin=1200,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.4,sig=0.1)
source('~/Projectes/R/simulaBolsa/simula1.R', echo=TRUE)
simulaPut(strike=200,valorPutOrigin=1200,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.35,sig=0.1)
simulaPut(strike=200,valorPutOrigin=1200,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.45,sig=0.1)
simulaPut(strike=210,valorPutOrigin=1470,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.45,sig=0.1)
simulaPut(strike=210,valorPutOrigin=1470,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=230,valorPutOrigin=2131,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=240,valorPutOrigin=2549,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=260,valorPutOrigin=3572,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
simulaPut(strike=245,valorPutOrigin=2780,valorIndexOrigen=236,tendenciaMercat=1,lamb=24,mesosPut=11,mitja=1-0.3,sig=0.1)
n <- 100
source('~/Projectes/R/CursBayesianStatistics/session_01/01_generative_models.R', echo=TRUE)
?rbinom
muestra <- rbinom(n, 1, p)
muestra
muertos_ano_0 <- rpois(1000, 1160)
n <- 100
p <- 0.51
muestra <- rbinom(n, 1, p)
muertos_ano_0 <- rpois(1000, 1160)
muertos_ano_1 <- rpois(1000, 1131)
hist(muertos_ano_1 - muertos_ano_0)
?rpois
mu <- 1.5
incr <- 0.7
sigma <- 0.5
x <- rnorm(13, mu, sigma)
y <- rnorm(15, mu + incr, sigma)
t.test(x, y)
n <- 100
a <- 1.1
b <- 0.3
sigma <- 0.3
x <- runif(n, -5, 5)
y <- rnorm(n, a + b * x, sigma)
plot(x, y)
abline(lm(y ~ x), col = "red")
modelo <- lm(y ~ x)
summary(modelo)
n_customers <- 100
lambda_exp <- 0.1
lambda_pois <- 1.3
customer_life <- rexp(n_customers, lambda_exp)
hist(customer_life)
sales <- sapply(customer_life, function(d) rpois(1, lambda_pois * d))
hist(sales)
rstan:::rstudio_stanc("Projectes/R/CursBayesianStatistics/session_01/01_t_test.stan")
source('~/Projectes/R/CursBayesianStatistics/session_01/01_t_test.R', echo=TRUE)
install.packages(psych)
install.packages('psych')
install.packages('psych')
install.packages('psych',dependencies = TRUE)
library(rstan)
setwd("~/Projectes/R/CursBayesianStatistics/session_05")
setwd("~/Projectes/R/CursBayesianStatistics/session_05")
library(rstan)
library(reshape2)
library(ggplot2)
library(plyr)
n_sample <- 30
n_grid   <- 100
sd_error <- 0.1
x <- sort(runif(n_sample) * 2 * pi)
y <- sin(x) + rnorm(n_sample, 0, sd_error)
rejilla <- seq(0, 2 * pi, length.out = n_grid)
all_x <- c(x, rejilla)
x
y
rejilla
distances <- as.matrix(dist(as.matrix(all_x), method = "manhattan"))
distances <- distances^1.5
hist(rejilla)
plot(rejilla)
plot(x,y)
ggplot(x,y)
ggplot(aes(x,y))
ggplot(aes(x,y))+geom_smooth(model=lm)
ggplot(aes(x~y))+geom_smooth(model=lm)
ggplot(x=x,y=y))+geom_smooth(model=lm)
ggplot(x=x,y=y)+geom_smooth(model=lm)
ggplot(x=x,y=y)+geom_smooth()
ggplot(x=x,y=y)
ggplot(x=x,y=y)+geom_smooth(model=lm)
ggplot(x=x,y=y)+geom_jitter()
p<-ggplot(x=x,y=y)+geom_jitter()
p
ggplot(x=x,y=y)+geom_jitter()
ggplot(x=x,y=y)
p<-ggplot(x=x,y=y)
p
p<-ggplot(x=x,y=y)+geom_abline()
p
p<-ggplot(x=x,y=y)+geom_jitter()
p
p<-ggplot(x=x,y=y)+geom_jitter(with=0.5,size=1)
p<-ggplot(x=x,y=y)+geom_jitter(width=0.5,size=1)
p
p<-ggplot(x=x,y=y)+geom_jitter(x=x,width=0.5,size=1)
p
setwd("~/Projectes/R/CursBayesianStatistics/session_05")
setwd("~/Projectes/R/CursBayesianStatistics/session_05")
library(rstan)
n <- 100
v.real <- rnorm(n, 1, 0.2)
x.real <- rep(0, n)
for (i in 2:length(v.real))
x.real[i] <- x.real[i-1] + 1 * v.real[i-1]
plot(x.real, type = "l")
sigma.x <- 0.2
sigma.v <- 0.2
v0 <- v.real + rnorm(n, 0, sigma.v)
x0 <- x.real + rnorm(n, 0, sigma.x)
fit <- stan("05_kalman.stan",
data = list(N = n, x0 = x0, v0 = v0,
sigmax = sigma.x,
sigmav = sigma.v),
iter=12000, warmup=2000,
chains=4, thin=10, cores = 4)
summary(fit)
naiveSum<-mean(sqrt(x.real-x0))
setwd("~/Projectes/R/CursBayesianStatistics/session_05")
library(rstan)
n <- 100
v.real <- rnorm(n, 1, 0.2)
x.real <- rep(0, n)
for (i in 2:length(v.real))
x.real[i] <- x.real[i-1] + 1 * v.real[i-1]
plot(x.real, type = "l")
sigma.x <- 0.2
sigma.v <- 0.2
v0 <- v.real + rnorm(n, 0, sigma.v)
x0 <- x.real + rnorm(n, 0, sigma.x)
fit <- stan("05_kalman.stan",
data = list(N = n, x0 = x0, v0 = v0,
sigmax = sigma.x,
sigmav = sigma.v),
iter=12000, warmup=2000,
chains=4, thin=10, cores = 4)
summary(fit)
naiveSum<-mean(sqrt(x.real-x0))
res <- as.data.frame(fit)
res$id <- 1:nrow(res)
res <- melt(res, id.vars = "id")
res <- res[grep("^x\\[*", res$variable),]
res$variable <- gsub("^x\\[", "", res$variable)
res$variable <- gsub("\\]$", "", res$variable)
res$variable <- as.numeric(res$variable)
naiveSumX<-mean(sqrt(x.real-x0))
naiveSumX<-mean(sqrt(v.real-v0))
summary(fit)
naiveSumX<-mean(sqrt(x.real-x0))
naiveSumX<-mean(sqrt(v.real-v0))
res <- as.data.frame(fit)
res$id <- 1:nrow(res)
res <- melt(res, id.vars = "id")
res <- res[grep("^x\\[*", res$variable),]
res$variable <- gsub("^x\\[", "", res$variable)
res$variable <- gsub("\\]$", "", res$variable)
res$variable <- as.numeric(res$variable)
x.real
x0
str(x.real)
str(x0)
naiveSumX<-mean(sqrtabs((x.real-x0)))
naiveSumX<-mean(sqrtabs((v.real-v0)))
naiveSumX<-mean(sqrt(abs(x.real-x0)))
naiveSumX<-mean(sqrt(abs(v.real-v0)))
res <- as.data.frame(fit)
naiveSumX<-mean(sqrt(abs(x.real-x0)))
naiveSumV<-mean(sqrt(abs(v.real-v0)))
naiveSumX
naiveSumV
head(res)
res$`x[1]`
res$`x[1]`
res$`v[1]`
res$id <- 1:nrow(res)
naiveSumV<-mean(sqrt(abs(v.real-v0)))
res <- as.data.frame(fit)
grep("^x\\[*", res$variable)
res <- as.data.frame(fit)
res$id <- 1:nrow(res)
res <- melt(res, id.vars = "id")
res$variable
res$variable
res$variable[x1]
res$variable['x1']
res$variable <- as.numeric(res$variable)
res$value
res$variable
res$variable
str(res)
res <- as.data.frame(fit)
str(res)
str(res$`x[1]`)
